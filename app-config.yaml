app:
  title: Scaffolded Backstage App
  baseUrl: http://localhost:3000

organization:
  name: VNTG

backend:
  # Used for enabling authentication, secret is shared by all backend plugins
  # See https://backstage.io/docs/auth/service-to-service-auth for
  # information on the format
  auth:
    keys:
      - secret: ${BACKEND_SECRET}
    externalAccess:
      - type: static
        options:
          token: ${EXTERNAL_SECRET}         # 임의의 긴 랜덤 문자열
          subject: admin-curl-access         # 토큰 식별자(임의)
        accessRestrictions:
          - plugin: catalog                  # 이 토큰은 catalog 플러그인만 호출 가능
          # permission: catalog.entity.create,catalog.entity.read  # (선택) 더 좁히기
  baseUrl: http://localhost:7007
  listen:
    port: 7007
    # Uncomment the following host directive to bind to specific interfaces
    # host: 127.0.0.1
  csp:
    connect-src: ["'self'", 'http:', 'https:']
    # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
    # Default Helmet Content-Security-Policy values can be removed by setting the key to false
  cors:
    origin: http://localhost:3000
    methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
    credentials: true
  # This is for local development only, it is not recommended to use this in production
  # The production database configuration is stored in app-config.production.yaml
  database:
   # client: better-sqlite3
   # connection: ':memory:'
   # config options: https://node-postgres.com/apis/client
    client: pg
    connection:
      host: ${POSTGRES_HOST}
      port: ${POSTGRES_PORT}
      user: ${POSTGRES_USER}
      password: ${POSTGRES_PASSWORD}
      database: ${POSTGRES_DB}
    # Tech Insights용 명시적 설정
    plugin:
      tech_insights:
        connection:
          host: ${POSTGRES_HOST}
          port: ${POSTGRES_PORT}
          user: ${POSTGRES_USER}
          password: ${POSTGRES_PASSWORD}
          database: ${POSTGRES_DB}
  # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir

integrations:
  github:
    - host: github.com
      # Personal Access Token (공개 리포지토리 및 백업용)
      # 로그인하지 않은 사용자나 권한이 없는 경우에만 사용됨
      # TechDocs는 로그인한 사용자의 GitHub OAuth 토큰을 우선 사용
      token: ${GITHUB_TOKEN}
    ### Example for how to add your GitHub Enterprise instance using the API:
    # - host: ghe.example.net
    #   apiBaseUrl: https://ghe.example.net/api/v3
    #   token: ${GHE_TOKEN}

proxy:
  ### Example for how to add a proxy endpoint for the frontend.
  ### A typical reason to do this is to handle HTTPS and CORS for internal services.
  # endpoints:
  #   '/test':
  #     target: 'https://example.com'
  #     changeOrigin: true

# Reference documentation http://backstage.io/docs/features/techdocs/configuration
# Note: After experimenting with basic setup, use CI/CD to generate docs
# and an external cloud storage when deploying TechDocs for production use-case.
# https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
techdocs:
  builder: 'local' # Alternatives - 'external'
  generator:
    runIn: 'local' # Alternatives - 'docker' (local은 빠르고 간단, docker는 격리된 환경)
  publisher:
    type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

auth:
  autologout:
    enabled: true                 # 기본 true지만 명시 권장
    idleTimeoutMinutes: 30        # 유휴 30분 후 자동 로그아웃
    promptBeforeIdleSeconds: 10   # 만료 10초 전 경고 프롬프트
    useWorkerTimers: true         # 비활성 탭 타이머 보정
    logoutIfDisconnected: true    # 브라우저에 활성 탭 없으면 시간 경과 후 로그아웃
  environment: development
  providers:
    google:
      development:
        clientId: ${AUTH_GOOGLE_CLIENT_ID}
        clientSecret: ${AUTH_GOOGLE_CLIENT_SECRET}
        ## uncomment to set lifespan of user session
        sessionDuration: { hours: 24 } # supports `ms` library format (e.g. '24h', '2 days'), ISO duration, "human duration" as used in code
        # Additional options to fix nonce issues
        additionalScopes:
          - openid
          - profile
          - email
        signIn:
          resolvers:
            # See https://backstage.io/docs/auth/google/provider#resolvers for more resolvers
            # Option 1: Strict email matching with annotation (current)
            - resolver: emailMatchingUserEntityAnnotation
            # Option 2: Simple email matching without annotation (fallback)
            - resolver: emailMatchingUserEntityProfileEmail
            # Option 3: More flexible - creates user if not exists
            # - resolver: emailLocalPartMatchingUserEntityName
    github:
      development:
        clientId: ${AUTH_GITHUB_CLIENT_ID}
        clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
        additionalScopes:
          - user:email  # Request email access
          - read:user   # Read user profile
          - repo       # Access to repositories (TechDocs, Scaffolder)
          - read:org   # Read organization data
        signIn:
          resolvers:
            # GitHub는 username 매칭만 사용 (email 충돌 방지)
            - resolver: usernameMatchingUserEntityName
  # # see https://backstage.io/docs/auth/ to learn about auth providers
  # providers:
  #   # See https://backstage.io/docs/auth/guest/provider
  #   guest: {}
  # #   github:
  # #     development:
  # #       clientId: ${AUTH_GITHUB_CLIENT_ID}
  # #       clientSecret: ${AUTH_GITHUB_CLIENT_SECRET}
  # #       ## uncomment if using GitHub Enterprise
  # #       # enterpriseInstanceUrl: ${AUTH_GITHUB_ENTERPRISE_INSTANCE_URL}
  # #       ## uncomment to set lifespan of user session
  # #       # sessionDuration: { hours: 24 } # supports `ms` library format (e.g. '24h', '2 days'), ISO duration, "human duration" as used in code
  # #       signIn:
  # #         resolvers:
  # #           # See https://backstage.io/docs/auth/github/provider#resolvers for more resolvers
  # #           - resolver: usernameMatchingUserEntityName

scaffolder:
  # see https://backstage.io/docs/features/software-templates/configuration for software template options

catalog:
  import:
    entityFilename: catalog-info.yaml
    pullRequestBranchName: backstage-integration
  rules:
    - allow: [Component, System, API, Resource, Location, Domain, Group, User, Template]
  locations:
    # ===== Backstage 내부 카탈로그 =====
    
    # System 정의
    - type: file
      target: ../../catalog/systems/rnd-nx-framework.yaml
      rules:
        - allow: [System]
    
    # Domain 정의
    - type: file
      target: ../../catalog/domains/all-domains.yaml
      rules:
        - allow: [Domain]
    
    # API 정의
    - type: file
      target: ../../catalog/apis/tech-blog-rest-api.yaml
      rules:
        - allow: [API]
    
    # Resource 정의
    - type: file
      target: ../../catalog/resources/tech-blog-database.yaml
      rules:
        - allow: [Resource]
    
    # 조직 구조 (Users, Groups)
    - type: file
      target: ../../examples/org.yaml
      rules:
        - allow: [User, Group]
    
    # ===== RND-NX 프로젝트 컴포넌트 (Tech Blog) =====
    
    # Backend Services
    - type: file
      target: ../../../RND-NX/apps/tech-blog/api-server/catalog-info.yaml
      rules:
        - allow: [Component]
    
    # Frontend Applications
    - type: file
      target: ../../../RND-NX/apps/tech-blog/user-client/catalog-info.yaml
      rules:
        - allow: [Component]
    
    # Test Projects
    - type: file
      target: ../../../RND-NX/apps/tech-blog/api-server-test/catalog-info.yaml
      rules:
        - allow: [Component]
    
    # ===== 확장 카탈로그 (라이브러리, 인프라) =====
    
    # Backend Libraries
    - type: file
      target: ../../catalog/components/be-users-library.yaml
      rules:
        - allow: [Component]
    - type: file
      target: ../../catalog/components/be-kafka-core-library.yaml
      rules:
        - allow: [Component]
    - type: file
      target: ../../catalog/components/be-websocket-library.yaml
      rules:
        - allow: [Component]
    - type: file
      target: ../../catalog/components/be-swagger-library.yaml
      rules:
        - allow: [Component]
    
    # Frontend Libraries
    - type: file
      target: ../../catalog/components/fe-cursor-figma-mcp.yaml
      rules:
        - allow: [Component]
    
    # Infrastructure Components (Terraform, Ansible)
    - type: file
      target: ../../catalog/components/terraform-gke-module.yaml
      rules:
        - allow: [Component]
    - type: file
      target: ../../catalog/components/ansible-common-setup.yaml
      rules:
        - allow: [Component]
    
    # GCP Resources
    - type: file
      target: ../../catalog/resources/gke-dev-cluster.yaml
      rules:
        - allow: [Resource]
    - type: file
      target: ../../catalog/resources/gke-test-cluster.yaml
      rules:
        - allow: [Resource]
    - type: file
      target: ../../catalog/resources/gke-prod-cluster.yaml
      rules:
        - allow: [Resource]
    - type: file
      target: ../../catalog/resources/cloudsql-test.yaml
      rules:
        - allow: [Resource]
    - type: file
      target: ../../catalog/resources/gcp-vpc-dev.yaml
      rules:
        - allow: [Resource]
    - type: file
      target: ../../catalog/resources/gcp-vpc-test.yaml
      rules:
        - allow: [Resource]
    - type: file
      target: ../../catalog/resources/gcp-vpc-prod.yaml
      rules:
        - allow: [Resource]
    
    # ArgoCD Applications
    - type: file
      target: ../../catalog/resources/argocd-dev-shared.yaml
      rules:
        - allow: [Resource]
    - type: file
      target: ../../catalog/resources/argocd-prod-shared.yaml
      rules:
        - allow: [Resource]
    - type: file
      target: ../../catalog/resources/argocd-sample-service.yaml
      rules:
        - allow: [Resource]
    
    # Additional Infrastructure Resources
    - type: file
      target: ../../catalog/resources/kafka-cluster.yaml
      rules:
        - allow: [Resource]
    - type: file
      target: ../../catalog/resources/loki-grafana-stack.yaml
      rules:
        - allow: [Resource]
    - type: file
      target: ../../catalog/resources/local-docker-env.yaml
      rules:
        - allow: [Resource]
    
    # APIs
    - type: file
      target: ../../catalog/apis/websocket-chat-api.yaml
      rules:
        - allow: [API]
    
    # ===== 예시 카탈로그 (선택사항) =====
    
    # Backstage 기본 예시
    - type: file
      target: ../../examples/entities.yaml
    
    # 템플릿
    - type: file
      target: ../../examples/template/template.yaml
      rules:
        - allow: [Template]

    ## Uncomment these lines to add more example data
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all.yaml

    ## Uncomment these lines to add an example org
    # - type: url
    #   target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme-corp.yaml
    #   rules:
    #     - allow: [User, Group]

kubernetes:
  # see https://backstage.io/docs/features/kubernetes/configuration for kubernetes configuration options

# see https://backstage.io/docs/permissions/getting-started for more on the permission framework
permission:
  # setting this to `false` will disable permissions
  enabled: true

# Tech Insights configuration
techInsights:
  factRetrievers:
    dbStatusFactRetriever:
      cadence: '*/1 * * * *'  # 매 분마다 실행
      lifecycle:
        timeToLive: { hours: 24 }
  
  factChecker:
    checks:
      # 1. DB 연결 상태 체크
      db-connection-active:
        type: json-rules-engine
        name: DB 연결 상태
        description: 데이터베이스가 정상적으로 연결되어 있는지 확인
        factIds:
          - tech-blog-db-status-retriever
        rule:
          conditions:
            all:
              - fact: dbConnectionStatus
                operator: equal
                value: true
      
      # 2. DB 응답 시간 체크
      db-response-time-healthy:
        type: json-rules-engine
        name: DB 응답 시간
        description: 데이터베이스 응답 시간이 200ms 이하인지 확인
        factIds:
          - tech-blog-db-status-retriever
        rule:
          conditions:
            all:
              - fact: dbResponseTime
                operator: lessThanInclusive
                value: 200
      
      # 3. 활성 연결 수 체크
      db-active-connections-normal:
        type: json-rules-engine
        name: 활성 연결 수
        description: 활성 연결 수가 50개 이하인지 확인
        factIds:
          - tech-blog-db-status-retriever
        rule:
          conditions:
            all:
              - fact: activeConnections
                operator: lessThanInclusive
                value: 50
      
      # 4. 유휴 연결 수 체크
      db-idle-connections-normal:
        type: json-rules-engine
        name: 유휴 연결 수
        description: 유휴 연결 수가 20개 이하인지 확인 (연결 누수 방지)
        factIds:
          - tech-blog-db-status-retriever
        rule:
          conditions:
            all:
              - fact: idleConnections
                operator: lessThanInclusive
                value: 20
      
      # 5. DB 디스크 사용률 체크
      db-disk-usage-normal:
        type: json-rules-engine
        name: DB 디스크 사용률
        description: 디스크 사용률이 80% 이하인지 확인
        factIds:
          - tech-blog-db-status-retriever
        rule:
          conditions:
            all:
              - fact: dbDiskUsage
                operator: lessThanInclusive
                value: 80
      
      # 6. DB 크기 체크
      db-size-normal:
        type: json-rules-engine
        name: DB 크기
        description: DB 크기가 10GB(10240MB) 이하인지 확인
        factIds:
          - tech-blog-db-status-retriever
        rule:
          conditions:
            all:
              - fact: dbSizeMB
                operator: lessThanInclusive
                value: 10240
      
      # 7. 캐시 히트율 체크
      db-cache-hit-ratio-good:
        type: json-rules-engine
        name: 캐시 히트율
        description: 캐시 히트율이 90% 이상인지 확인
        factIds:
          - tech-blog-db-status-retriever
        rule:
          conditions:
            all:
              - fact: cacheHitRatio
                operator: greaterThanInclusive
                value: 90
      
      # 8. 최장 쿼리 실행 시간 체크
      db-longest-query-duration-normal:
        type: json-rules-engine
        name: 최장 쿼리 실행 시간
        description: 가장 오래 실행 중인 쿼리가 30초(30000ms) 이하인지 확인
        factIds:
          - tech-blog-db-status-retriever
        rule:
          conditions:
            all:
              - fact: longestQueryDuration
                operator: lessThanInclusive
                value: 30000
      
      # 9. 트랜잭션 커밋 비율 체크
      db-commit-ratio-good:
        type: json-rules-engine
        name: 트랜잭션 커밋 비율
        description: 트랜잭션 커밋 비율이 95% 이상인지 확인
        factIds:
          - tech-blog-db-status-retriever
        rule:
          conditions:
            all:
              - fact: commitRatio
                operator: greaterThanInclusive
                value: 95
      
      # 10. Dead tuple 비율 체크
      db-dead-tuple-ratio-low:
        type: json-rules-engine
        name: Dead Tuple 비율
        description: Dead tuple 비율이 10% 이하인지 확인 (VACUUM 필요 여부)
        factIds:
          - tech-blog-db-status-retriever
        rule:
          conditions:
            all:
              - fact: deadTupleRatio
                operator: lessThanInclusive
                value: 10
